/*
Copyright Sparebanken Vest

Based on the Kubernetes controller example at
https://github.com/kubernetes/sample-controller

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v2alpha1 "github.com/SparebankenVest/azure-key-vault-to-kubernetes/pkg/k8s/apis/azurekeyvault/v2alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAzureKeyVaultSecretIdentities implements AzureKeyVaultSecretIdentityInterface
type FakeAzureKeyVaultSecretIdentities struct {
	Fake *FakeAzurekeyvaultV2alpha1
	ns   string
}

var azurekeyvaultsecretidentitiesResource = schema.GroupVersionResource{Group: "azurekeyvault.spv.no", Version: "v2alpha1", Resource: "azurekeyvaultsecretidentities"}

var azurekeyvaultsecretidentitiesKind = schema.GroupVersionKind{Group: "azurekeyvault.spv.no", Version: "v2alpha1", Kind: "AzureKeyVaultSecretIdentity"}

// Get takes name of the azureKeyVaultSecretIdentity, and returns the corresponding azureKeyVaultSecretIdentity object, and an error if there is any.
func (c *FakeAzureKeyVaultSecretIdentities) Get(name string, options v1.GetOptions) (result *v2alpha1.AzureKeyVaultSecretIdentity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(azurekeyvaultsecretidentitiesResource, c.ns, name), &v2alpha1.AzureKeyVaultSecretIdentity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.AzureKeyVaultSecretIdentity), err
}

// List takes label and field selectors, and returns the list of AzureKeyVaultSecretIdentities that match those selectors.
func (c *FakeAzureKeyVaultSecretIdentities) List(opts v1.ListOptions) (result *v2alpha1.AzureKeyVaultSecretIdentityList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(azurekeyvaultsecretidentitiesResource, azurekeyvaultsecretidentitiesKind, c.ns, opts), &v2alpha1.AzureKeyVaultSecretIdentityList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v2alpha1.AzureKeyVaultSecretIdentityList{ListMeta: obj.(*v2alpha1.AzureKeyVaultSecretIdentityList).ListMeta}
	for _, item := range obj.(*v2alpha1.AzureKeyVaultSecretIdentityList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested azureKeyVaultSecretIdentities.
func (c *FakeAzureKeyVaultSecretIdentities) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(azurekeyvaultsecretidentitiesResource, c.ns, opts))

}

// Create takes the representation of a azureKeyVaultSecretIdentity and creates it.  Returns the server's representation of the azureKeyVaultSecretIdentity, and an error, if there is any.
func (c *FakeAzureKeyVaultSecretIdentities) Create(azureKeyVaultSecretIdentity *v2alpha1.AzureKeyVaultSecretIdentity) (result *v2alpha1.AzureKeyVaultSecretIdentity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(azurekeyvaultsecretidentitiesResource, c.ns, azureKeyVaultSecretIdentity), &v2alpha1.AzureKeyVaultSecretIdentity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.AzureKeyVaultSecretIdentity), err
}

// Update takes the representation of a azureKeyVaultSecretIdentity and updates it. Returns the server's representation of the azureKeyVaultSecretIdentity, and an error, if there is any.
func (c *FakeAzureKeyVaultSecretIdentities) Update(azureKeyVaultSecretIdentity *v2alpha1.AzureKeyVaultSecretIdentity) (result *v2alpha1.AzureKeyVaultSecretIdentity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(azurekeyvaultsecretidentitiesResource, c.ns, azureKeyVaultSecretIdentity), &v2alpha1.AzureKeyVaultSecretIdentity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.AzureKeyVaultSecretIdentity), err
}

// Delete takes name of the azureKeyVaultSecretIdentity and deletes it. Returns an error if one occurs.
func (c *FakeAzureKeyVaultSecretIdentities) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(azurekeyvaultsecretidentitiesResource, c.ns, name), &v2alpha1.AzureKeyVaultSecretIdentity{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAzureKeyVaultSecretIdentities) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(azurekeyvaultsecretidentitiesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &v2alpha1.AzureKeyVaultSecretIdentityList{})
	return err
}

// Patch applies the patch and returns the patched azureKeyVaultSecretIdentity.
func (c *FakeAzureKeyVaultSecretIdentities) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v2alpha1.AzureKeyVaultSecretIdentity, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(azurekeyvaultsecretidentitiesResource, c.ns, name, pt, data, subresources...), &v2alpha1.AzureKeyVaultSecretIdentity{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v2alpha1.AzureKeyVaultSecretIdentity), err
}
